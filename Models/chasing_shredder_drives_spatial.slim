// Author: Sam Champer and Isabel Kim.
// Created in association with Jackson Champer and the Messer lab.

// A framework for simulating many different gene drives
// with varying parameters, intended to be configured by
// altering the heading below, or by dynamically varying
// values in the header using an associated Python file.

// These gene drives are located on a sex chromosome and target the 
// opposite sex chromosome. 
// This file may be used to run the X-shredder drive or Y-shredder drive.

// The following header to be replaced via python,
// such that these values can be varied across multiple runs of slim.

initialize() {
	
	// Drive parameters:
	defineConstant("TWO_DIMENSIONAL", T); // If F, simulation runs in 1-D
	defineConstant("X_SHREDDER", T);
	defineConstant("Y_SHREDDER", F);
	defineConstant("DRIVE_FITNESS_VALUE", 0.95);
	defineConstant("EMBRYO_RESISTANCE_RATE", 0.0);
	defineConstant("GERMLINE_RESISTANCE_RATE", 0.99);
	defineConstant("NUM_GRNAS", 1);
	defineConstant("R1_OCCURRENCE_RATE", 0.0);
	
	// Ecology parameters:
	defineConstant("GROWTH_AT_ZERO_DENSITY", 6);
	defineConstant("INBREEDING_AVOIDANCE_FACTOR", 0.0); // If negative, this is a % increase. If positive, this is a % decrease
	defineConstant("INBREEDING_FECUNDITY_PENALTY", 0.0); // Ranges from 0 - 1. Always a % decrease
	defineConstant("REPRISING_BOUNDARIES", T); // If F, toroidal boundaries are used
	
	// Release specifics, depending on the drive:
	defineConstant("HETEROZYGOUS_DROP", Y_SHREDDER);
	defineConstant("DROP_RADIUS", 0.01);
	defineConstant("NO_DROP", F);
	defineConstant("FEMALE_ONLY_DROP", Y_SHREDDER);
	defineConstant("MALE_ONLY_DROP", X_SHREDDER);
	defineConstant("CIRCLE_DROP", T);
	defineConstant("LEFT_EDGE_DROP", F);
	defineConstant("UNIFORM_DROP", F);
	defineConstant("CORNER_DROP", F);
	
	// 2-D parameters:
	if (TWO_DIMENSIONAL) {
		defineConstant("CAPACITY", 10000);
		defineConstant("DENSITY_INTERACTION_DISTANCE", 0.01);
		defineConstant("DROP_SIZE", 101);
		defineConstant("SPEED", 0.04);
		defineConstant("NUMBER_OF_CELLS", 64); // A perfect-square value- the number of quadrants for Green's coefficient calculation.
		defineConstant("EXPECTED_ADULT_COMPETITION", CAPACITY * PI * DENSITY_INTERACTION_DISTANCE^2);
		// 1-D parameters:
	} else {
		defineConstant("CAPACITY", 3927);
		defineConstant("DENSITY_INTERACTION_DISTANCE", 0.002);
		defineConstant("DROP_SIZE", 40);
		defineConstant("SPEED", 0.008);
		defineConstant("NUMBER_OF_CELLS", 40);
		defineConstant("EXPECTED_ADULT_COMPETITION", CAPACITY * 2*DENSITY_INTERACTION_DISTANCE);
		defineConstant("EQUILIBRIUM_BIN_POPULATION", 0.5*CAPACITY/20);
	}
	// */    // End header.
	
	// Below are defaults that will not change:
	defineConstant("FEMALE_SPEED", SPEED);
	defineConstant("GRNA_SATURATION_SIMULATED", F);
	defineConstant("MALE_ONLY_PROMOTER", F);
	defineConstant("MATING_DISTANCE", SPEED);
	defineConstant("NUM_CUT_PHASES", 1);
	defineConstant("EQUILIBRIUM_WT_ALLELE_THRESHOLD", 0.8*1.5*CAPACITY);
	defineConstant("R2_FITNESS_VALUE", 1.0);
	
	// For mortality rate as a function of age:
	// Some females are allowed to survive two generations:	
	defineConstant("RATE_FEMALES_SURVIVE", 0.0);
	
	// This simulation will use a non-Wright Fisher model.
	initializeSLiMModelType("nonWF");
	
	// This simulation will take place across continuous space.
	// The model tracks pedigrees in order to implement inbreeding avoidance.
	if (TWO_DIMENSIONAL) {
		if (REPRISING_BOUNDARIES)
			initializeSLiMOptions(keepPedigrees = T, dimensionality = "xy");
		else
			initializeSLiMOptions(keepPedigrees=T, dimensionality="xy", periodicity="xy");
		
		// Mate searching:
		initializeInteractionType(1, "xy", reciprocal=T, maxDistance=MATING_DISTANCE);
		// Adult competition:
		initializeInteractionType(2, "xy", reciprocal=T, maxDistance=DENSITY_INTERACTION_DISTANCE);
	} else {
		if (REPRISING_BOUNDARIES)
			initializeSLiMOptions(keepPedigrees = T, dimensionality = "x"); //for 1-D
		else
			initializeSLiMOptions(keepPedigrees=T, dimensionality="x", periodicity="x");
		
		initializeInteractionType(1, "x", reciprocal=T, maxDistance=MATING_DISTANCE);
		initializeInteractionType(2, "x", reciprocal=T, maxDistance=DENSITY_INTERACTION_DISTANCE);
	}
	
	// Four variations: Wild type, drive, r1 resistance, r2 resistance.
	wt = initializeMutationType("m1", 0.5, "f", 0.0);
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	r1 = initializeMutationType("m3", 0.5, "f", 0.0);
	r2 = initializeMutationType("m4", 0.5, "f", 0.0);
	cut = initializeMutationType("m5", 0.5, "f", 0.0);
	gap = initializeMutationType("m6", 0.5, "f", 0.0);
	variations = c(wt, dr, r1, r2, cut, gap);
	
	// Variations are all part of g1 genome element.
	initializeGenomicElementType("g1", variations, c(1, 1, 1, 1, 1, 1));
	
	// Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
	initializeGenomicElement(g1, 0, NUM_GRNAS - 1);
	
	// These mutations overwrite one another.
	variations.mutationStackPolicy = "l";
	variations.mutationStackGroup = 1;
	
	// No mutation in this model.
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
}


//// FUNCTION FOR FORMING A RESISTANCE ALLELE AT A GIVEN LOCUS.
function (void)addResistanceAllele(o<Genome>$ genome, i$ locus) {
	// Resistance alleles form at a specified rate.	m3 is r1, m4 is r2.
	genome.addNewDrawnMutation(ifelse((runif(1) < R1_OCCURRENCE_RATE), m3,m4), locus);
}

//// FUNCTION FOR CAS9 EFFECTS IN THE GERMLINE.
function (void)germline(o<Genome>$ child_chromosome, o<Individual>$ parent, f$ resistance_rate) {
	// Determine presence of drive in this parent.
	parent_drive_count = sum(parent.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If parent doesn't have drive allele, nothing happens in germline.
	if (!parent_drive_count)
		return;
	
	// Chromosome must have wt to cut, or nothing happens.
	if (child_chromosome.countOfMutationsOfType(m1) == 0)
		return;
	
	// Using the resistance rate passed to the function,
	// determine the per phase cut rate.
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - resistance_rate)^(1 / (NUM_CUT_PHASES * grna_factor));
	
	// Determine if cas9 cuts the chromosome in the germline.
	casCut(child_chromosome, per_phase_cut_rate);
}

//// FUNCTION FOR CAS9 EFFECTS IN EMBRYO.
function (void)embryo(o<Genome>$ child_chromosome_1, o<Genome>$ child_chromosome_2, o<Individual>$ mother) {
	// Determine presence of drive in this mother.
	mother_drive_count = sum(mother.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If mother doesn't have drive allele, nothing happens in embryo.
	if (!mother_drive_count)
		return;
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - EMBRYO_RESISTANCE_RATE)^(mother_drive_count / (NUM_CUT_PHASES * grna_factor));
	
	// Then pass this rate as an argument to  the casCut funtion to
	// determine if cas9 cuts in the embryo for each chromosome.
	casCut(child_chromosome_1, per_phase_cut_rate);
	casCut(child_chromosome_2, per_phase_cut_rate);
}

//// FUNCTION FOR CAS9 CUTTING A TARGET CHROMOSOME.
function (void)casCut(o<Genome>$ chromosome, f$ per_phase_cut_rate) {
	// If chromosome has no wild type targets to cut, cas9 does nothing.
	if (chromosome.countOfMutationsOfType(m1) == 0)
		return;
	
	// Vector of possible loci for cas9 to cut:
	wt_loci = chromosome.positionsOfMutationsOfType(m1);
	
	// In each cut phase...
	for (i in seqLen(NUM_CUT_PHASES)) {
		// At each possible locus...
		for (j in seqAlong(wt_loci)) {
			// Check to see if cas9 cuts...
			if (runif(1) < per_phase_cut_rate) {
				// Convert the locus temporarily to an m5,
				// representing that this site is being cut.
				chromosome.addNewDrawnMutation(m5, wt_loci[j]);
			}
		}
		// If any cuts were made...
		if (chromosome.countOfMutationsOfType(m5)) {
			cut_loci = chromosome.positionsOfMutationsOfType(m5);
			// If just one cut is made, create an R1 or R2 resistance allele.
			if (chromosome.countOfMutationsOfType(m5) == 1)
				addResistanceAllele(chromosome, cut_loci[0]);
			else {
				// If multiple cuts are made in the same cut phase, loss of
				// function results. Convert leftmost site to m4 (R2)
				// everthing else through the rightmost site to m6 (cut).
				number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
				for (index in seqLen(number_of_cuts))
					chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
				chromosome.addNewDrawnMutation(m4, cut_loci[0]);
			}
			// Because some wt loci may have been cut out of the
			// chromosome, remake the vector of possible cut sites.
			if (chromosome.countOfMutationsOfType(m1) == 0)
				return;
			wt_loci = chromosome.positionsOfMutationsOfType(m1);
		}
	}
}

//// FUNCTION TO OVERWRITE ONE GENOME WITH ANOTHER.
function (void)copy_genome(o<Genome>$ source, o<Genome>$ destination) {
	for (i in seqAlong(source.positionsOfMutationsOfType(m1))) //m1 loci (wt)
		destination.addNewDrawnMutation(m1, source.positionsOfMutationsOfType(m1)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m2))) //m2 loci (dr)
		destination.addNewDrawnMutation(m2, source.positionsOfMutationsOfType(m2)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m3))) //m3 loci (r1)
		destination.addNewDrawnMutation(m3, source.positionsOfMutationsOfType(m3)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m4))) //m4 loci (r2)
		destination.addNewDrawnMutation(m4, source.positionsOfMutationsOfType(m4)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m5))) //m5 loci (cut)
		destination.addNewDrawnMutation(m5, source.positionsOfMutationsOfType(m5)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m6))) //m6 loci (gap)
		destination.addNewDrawnMutation(m6, source.positionsOfMutationsOfType(m6)[i]);
}

//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
	// Representation of the value of the two chromosomes. Check for drive or wt to get the baseline value.
	c1_value = ifelse(ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS, DRIVE_FITNESS_VALUE, 1.0);
	c2_value = ifelse(ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS, DRIVE_FITNESS_VALUE, 1.0);
	
	// Check both chromosomes for resistance allele.
	if (ind.genome1.countOfMutationsOfType(m4) > 0)
		c1_value = c1_value * R2_FITNESS_VALUE;
	if (ind.genome2.countOfMutationsOfType(m4) > 0)
		c2_value = c2_value * R2_FITNESS_VALUE;
	
	return ifelse(X_SHREDDER, c2_value, sqrt(c1_value*c2_value));
}


//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction() {
	// First, only sample females for reproduction.
	// Next, evaluate whether reproduction is suppressed by a population suppression drive.
	// Then select a mate based on fitness and generate offspring.
	if (individual.tagF == 1.0) {
		all_neighbors = i1.nearestNeighbors(individual, subpop.individualCount);
		neighbors = all_neighbors[all_neighbors.tagF == 0.0];
		if (size(neighbors) == 0)
			return;
		attempt_no = 0;
		while (1) {
			// First, select a random mate.
			mate_no = 0;
			if (size(neighbors) > 1)
				mate_no = rdunif(1, max=size(neighbors) - 1);
			selected_mate = neighbors[mate_no];
			// Determine attractiveness of mate.
			mate_attractiveness = 0.5*genotypeFitness(selected_mate);
			
			// Inbreeding avoidance factor represents the percent decrease in attractiveness of a brother if positive
			// and the percent increase in attractiveness of a brother if negative
			if (selected_mate.pedigreeParentIDs[0] == individual.pedigreeParentIDs[0] & individual.pedigreeParentIDs[0] != -1)
				mate_attractiveness = mate_attractiveness * (1 - INBREEDING_AVOIDANCE_FACTOR);
			
			// Determine if this mate is chosen, based on attractiveness.
			if (runif(1) < mate_attractiveness)
				break;
			
			// After twenty candidates fail, female gives up.
			attempt_no = attempt_no + 1;
			if (attempt_no == 19)
				return;
		} // Mate has now been selected. 
		
		// Amount of competition faced per expected competition.
		adult_density_force = i2.totalOfNeighborStrengths(individual);
		competition_ratio = adult_density_force / EXPECTED_ADULT_COMPETITION;
		actual_competition_factor = GROWTH_AT_ZERO_DENSITY/ ((GROWTH_AT_ZERO_DENSITY-1) * competition_ratio + 1);
		
		// Offspring number based on binomial distrobution.
		// p for binomial draw. Number of offspring varies with female genes and competition.
		p = genotypeFitness(individual) * actual_competition_factor * 0.04 / (1 + RATE_FEMALES_SURVIVE);
		
		// Inbreeding fecundity penalty represents a percent decrease in the probability of generating offspring due to inbreeding
		if (selected_mate.pedigreeParentIDs[0] == individual.pedigreeParentIDs[0] & individual.pedigreeParentIDs[0] != -1)
			p = p * (1-INBREEDING_FECUNDITY_PENALTY);
		
		num_offspring = rbinom(1, 50, p);
		
		for (i in seqLen(num_offspring)) {
			// Add offspring to the subpopulation.
			offspring = subpop.addCrossed(individual, selected_mate);
			if (!isNULL(offspring)) {
				
				if (TWO_DIMENSIONAL) {
					if (REPRISING_BOUNDARIES) {
						// Offspring placement within reprising boundaries.
						do position = individual.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
						while (!individual.subpopulation.pointInBounds(position));
						offspring.setSpatialPosition(position);
					}
					else {
						// Toroidal world offspring placement.
						position = individual.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
						offspring.setSpatialPosition(p1.pointPeriodic(position));
					}
				} else {
					if (REPRISING_BOUNDARIES) {
						do position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
						while (!individual.subpopulation.pointInBounds(position));
						offspring.setSpatialPosition(position);
					}
					else {
						position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
						offspring.setSpatialPosition(p1.pointPeriodic(position));
					}
				}
			}
		}
	}
}


//// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {
	// First, identify the father, based on which parent had tag 0.0.
	if (parent1.tagF==0.0) {
		father = parent1;
		paternalGenome = childGenome1;
		mother = parent2;
		maternalGenome = childGenome2;
	} else {
		father = parent2;
		paternalGenome = childGenome2;
		mother = parent1;
		maternalGenome = childGenome1;
	}
	
	// If the father had the drive, simulate germline cleavage.
	if (father.countOfMutationsOfType(m2)==0) {
		child.tagF = asFloat(rdunif(1,0,1)); // No drive, so child's sex is random
	} else {
		// First, identify the father's drive genome. 
		// If this is an X_SHREDDER, this should be genome 2
		// If this is a Y_SHREDDER, this should be genome 1.
		if (father.genome1.countOfMutationsOfType(m2) == NUM_GRNAS) {
			fatherDriveGenome = father.genome1;
			fatherWTGenome = father.genome2;
		} else {
			fatherDriveGenome = father.genome2;
			fatherWTGenome = father.genome1; }
		
		// If the child received drive, the child is male.
		child_received_drive = paternalGenome.countOfMutationsOfType(m2) == NUM_GRNAS;
		
		// If the child didn't receive the drive chromosome, then the
		// child received the father's non-drive chromosome, which could have 
		// been cut.
		if (!child_received_drive) {
			germline(paternalGenome, father, GERMLINE_RESISTANCE_RATE);
			
			// If there was a cut, then this gamete wouldn't have been viable.
			// 50% of the time, drive is actually passed. 
			// 50% of the time, call germline resistance again (only exits loop if no cleavage results)
			while (paternalGenome.countOfMutationsOfType(m4) > 0) {
				if (runif(1) < 0.5)
					paternalGenome.addNewDrawnMutation(m2, seqLen(NUM_GRNAS));
				else {
					copy_genome(fatherWTGenome, paternalGenome);
					germline(paternalGenome, father, GERMLINE_RESISTANCE_RATE);
				}
			}
		}
		
		// Update booleans
		child_received_drive = paternalGenome.countOfMutationsOfType(m2)==NUM_GRNAS;
		
		// Drive alleles are on the Y-chromosome for the X_SHREDDER drive
		// and on the X-chromosome for the Y_SHREDDER drive
		if (X_SHREDDER)
			child.tagF = ifelse(child_received_drive, 0.0, 1.0);
		else if (Y_SHREDDER)
			child.tagF = ifelse(paternalGenome.countOfMutationsOfType(m2)==NUM_GRNAS, 1.0, 0.0);
	}
	
	if (Y_SHREDDER)
		embryo(maternalGenome,paternalGenome, mother);
	
	if (paternalGenome.countOfMutationsOfType(m4)) //shred
		return F;
	
	return T;
}


//// COLOR RULES FOR SLIM GUI DISPLAY.
early() {
	all = sim.subpopulations.individuals;
	males = all[all.tagF == 0.0];
	females = all[all.tagF == 1.0];
	males.color = "dodgerblue4"; // wt males
	females.color = "deepskyblue3"; // wt females
	males[males.countOfMutationsOfType(m3) >= NUM_GRNAS].color = "darkgoldenrod1"; // male and r1/(not d and not r2)
	females[females.countOfMutationsOfType(m3) >= NUM_GRNAS].color = "gold";  // female and r1/(not d and not r2)
	
	males[males.countOfMutationsOfType(m4) > 0].color = "purple"; // male and no drive and at least one r2 
	females[females.countOfMutationsOfType(m4) > 0].color = "mediumpurple1"; // female and no drive and at least one r2
	
	males[males.countOfMutationsOfType(m2) >= NUM_GRNAS].color = "firebrick"; // drive-carrier males are dark red
	females[females.countOfMutationsOfType(m2) >= NUM_GRNAS].color = "firebrick1"; // drive-carrier females are light red
}


//// EVALUATE SPATIAL INTERACTIONS BETWEEN INDIVIDUALS FOR OTHER FUNCTIONS.
late() {
	i1.evaluate();
	i2.evaluate();
}


//// SURVIVAL RULES FOR THE SIMULATION BASED ON AGE AND RULES FOR MOVEMENT.
late() {
	all = sim.subpopulations.individuals;
	is_female = all.tagF == 1.0;
	females = all[is_female];
	males = all[!is_female];
	
	// By default, we have non-overlapping generations
	males.fitnessScaling = 0.0;
	females.fitnessScaling = 0.0;
	
	// User may allow some females to survive
	if (RATE_FEMALES_SURVIVE > 0.0) {
		num_survive = round(RATE_FEMALES_SURVIVE*size(females));
		fem_survive = sample(females, num_survive);
		fem_survive.fitnessScaling = 1.0;
	}
	
	surviving_inds = all[all.fitnessScaling > 0.0];
	
	// Surviving individuals move
	for (ind in surviving_inds) {
		if (REPRISING_BOUNDARIES) {
			// Movement within reprising boundaries.
			if (TWO_DIMENSIONAL) {
				do position = ind.spatialPosition + rnorm(2, 0, FEMALE_SPEED);
				while (!ind.subpopulation.pointInBounds(position));
				ind.setSpatialPosition(position);
			} else {
				do position = ind.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
				while (!ind.subpopulation.pointInBounds(position));
				ind.setSpatialPosition(position);
			}
		} else {
			// Toroidal world movement.
			if (TWO_DIMENSIONAL) {
				ind.x = ind.x + rnorm(1, 0, FEMALE_SPEED);
				ind.y = ind.y + rnorm(1, 0, FEMALE_SPEED);
				ind.setSpatialPosition(p1.pointPeriodic(ind.spatialPosition));
			} else {
				ind.x = ind.x + rnorm(1, 0, FEMALE_SPEED);
				ind.setSpatialPosition(p1.pointPeriodic(ind.spatialPosition));
			}
		}
	}
}


//// START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 {
	// Start with a population of wild type.
	sim.addSubpop("p1", CAPACITY);
	all = p1.individuals;
	all.tagF = asFloat(rdunif(CAPACITY, 0, 1)); // Random sexes
	all.genomes.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
	
	// Start individuals scattered at random.
	if (TWO_DIMENSIONAL) {
		all.x = runif(CAPACITY);
		all.y = runif(CAPACITY);
	} else {
		all.x = p1.pointUniform(CAPACITY);
		sim.setValue("timer", "start");
	}
	
	sim.setValue("track_eq", NULL);
}


//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10 {
	
	if (NO_DROP)
		return;
	
	sim.addSubpop("p2", DROP_SIZE);
	drop = p2.individuals;
	
	if (MALE_ONLY_DROP)
		drop.tagF = rep(0.0, DROP_SIZE); // Tag value of 0 acts as male sex
	
	else if (FEMALE_ONLY_DROP)
		drop.tagF = rep(1.0, DROP_SIZE); // Tag value of 1 acts as female sex
	
	else
		drop.tagF = asFloat(rdunif(DROP_SIZE, 0, 1)); // Random sexes
	
	females = (drop.tagF == 1.0);
	males = (drop.tagF == 0.0);
	
	// For the X-shredder, only the Y chromosome has the drive. All X chromosomes should be wt.
	if (X_SHREDDER) {
		drop[females].genomes.addNewDrawnMutation(m1, seqLen(NUM_GRNAS)); // Females cannot get the drive
		drop[males].genome1.addNewDrawnMutation(m1, seqLen(NUM_GRNAS)); // Maternal genome gets wt
		drop[males].genome2.addNewDrawnMutation(m2, seqLen(NUM_GRNAS)); // Paternal genome gets drive
	}
	
	// For the Y-shredder, only the X chromsome has the drive. All Y chromosomes should be wt.
	if (Y_SHREDDER) {
		drop[females].genomes.addNewDrawnMutation(m2, seqLen(NUM_GRNAS)); // Females get drive on both chromosomes
		
		if (HETEROZYGOUS_DROP) // If this is a heterozygous drop, drive females only have the drive on genome1
			drop[females].genome2.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
		
		drop[males].genome1.addNewDrawnMutation(m2, seqLen(NUM_GRNAS)); // Maternal genome is X; gets the drive
		drop[males].genome2.addNewDrawnMutation(m1, seqLen(NUM_GRNAS)); // Paternal genome is a Y; stays wt
	}
	
	// Move all the individuals from the drop into p1:
	p1.takeMigrants(drop);
	
	if (TWO_DIMENSIONAL) {
		if (LEFT_EDGE_DROP) { // Left-rectangle drop
			drop.x = runif(DROP_SIZE, 0, DROP_RADIUS);
			drop.y = runif(DROP_SIZE);
		} else if (CIRCLE_DROP) { // Default circle drop
			drop.x = 0.5 + rnorm(DROP_SIZE, 0, DROP_RADIUS);
			drop.y = 0.5 + rnorm(DROP_SIZE, 0, DROP_RADIUS);
		} else if (UNIFORM_DROP) { // Scattered uniformly
			drop.x = runif(DROP_SIZE);
			drop.y = runif(DROP_SIZE);
		} else if (CORNER_DROP) {
			for (ind in drop) {
				ind.x = rnorm(1, 0, DROP_RADIUS);
				ind.y = rnorm(1, 0, DROP_RADIUS);
				ind.setSpatialPosition(p1.pointPeriodic(ind.spatialPosition));
			}
		}
	} else {
		// Only left-edge drops are possible for 1D
		drop.x = runif(DROP_SIZE, 0, DROP_RADIUS);
	}
	
	// Won't start tracking Green's coefficient until the number of
	// wt alleles falls at least 20% from its equilibrium value.
	sim.setValue("start_gc_tracking", F);

}


////PROGRAM OUTPUT AFTER DROP.
10: late() {
	
	// Population counts
	all = p1.individuals;
	is_male = all.tagF==0.0;
	males = all[is_male];
	females = all[!is_male];
	pop_size = size(all);
	num_females = size(females);
	num_males = size(males);
	this_gen = sim.generation-10;
	
	// Chromosome counts
	num_y = num_males;
	num_x = 2*num_females + num_males;
	num_autosomal_chromosomes = 2*pop_size;
	
	// Allele counts
	num_wt = sum(males.genome1.countOfMutationsOfType(m1)==NUM_GRNAS) + sum(females.genomes.countOfMutationsOfType(m1)==NUM_GRNAS);
	rate_wt = num_wt/num_x;
	num_complete_r1 = sum(all.genomes.countOfMutationsOfType(m3)==NUM_GRNAS);
	catn("R1 COUNT: " + num_complete_r1);
	
	if (X_SHREDDER) {
		num_dr = sum(males.genome2.countOfMutationsOfType(m2)==NUM_GRNAS);
		rate_dr = num_dr/num_y;
	} else if (Y_SHREDDER) {
		num_dr = sum(males.genome1.countOfMutationsOfType(m2) == NUM_GRNAS) + sum(females.genomes.countOfMutationsOfType(m2)==NUM_GRNAS);
		rate_dr = num_dr/num_x;
	}
	
	// Chasing analysis:
	
	// First, check whether the number of wild-type alleles has decreased at least
	// 20% from its equilibrium value
	if (num_wt < EQUILIBRIUM_WT_ALLELE_THRESHOLD) {
		catn("POTENTIAL_CHASE:: " + this_gen);
		
		if (!sim.getValue("start_gc_tracking"))
			sim.setValue("start_gc_tracking", T);  // Start measuring Green's coefficien
	
	}
	
	// Output for Python 
	if (NO_DROP)
		sim.setValue("start_gc_tracking", T);
	else {
		catn("GEN: "+this_gen+" RATE_DR: " + rate_dr);
	}
	
	// 2D-specific detection:
	if (TWO_DIMENSIONAL) {
		
		// Record quadrant counts to calculate Green's coefficient
		if (sim.getValue("start_gc_tracking")) {
			nondrive = all[all.countOfMutationsOfType(m2) == 0];
			nonx = nondrive.x;
			nony = nondrive.y;
			allx = all.x;
			ally = all.y;
			pos_vec = 0:(sqrt(NUMBER_OF_CELLS) - 1);
			dim = length(pos_vec);
			cell_width = 1.0/dim;
			positions = pos_vec * cell_width;
			nondrive_track = c();
			all_track = c();
			
			for (i in 0:(dim-1)) {
				div_left = positions[i];
				for (j in 0:(dim-1)) {
					div_bot = positions[j];
					nondrive_in_division = (nonx >= div_left) & (nonx < (div_left + cell_width)) & (nony >= div_bot) & (nony < (div_bot + cell_width));
					nondrive_in_cell = nondrive[nondrive_in_division];
					nondrive_cell_count = size(nondrive_in_cell); //number in this cell
					nondrive_track = c(nondrive_track, nondrive_cell_count); //add this onto this generation's count tracker
					all_in_division = (allx >= div_left) & (allx < (div_left + cell_width)) & (ally >= div_bot) & (ally < (div_bot + cell_width));
					all_in_cell = all[all_in_division];
					all_cell_count = size(all_in_cell);
					all_track = c(all_track, all_cell_count);
				}
			}
			
			nondrive_pop_size = sum(nondrive_track); // Number of wts
			
			// Prevent nan-error issues
			if (nondrive_pop_size > 1) {
				nondrive_greens_coeff = (var(nondrive_track)/mean(nondrive_track) - 1)/(sum(nondrive_track) - 1);
				all_greens_coeff = (var(all_track)/mean(all_track) - 1)/(sum(all_track)-1);
				// (1) number wt alleles (2) generation (3) population size (5) Green's coefficient of wts for chase detection (7) Green's coefficient of all individuals
				catn("WT_ALLELES:: " + num_wt + " " + this_gen + " " + pop_size +" " + "GC_SPACE::" + " " + nondrive_greens_coeff + " " + "OVERALL_GC::" + " " +all_greens_coeff);
			}
		}
		
		// 1-D specific detection:
	} else {
		
		// Track the time it takes for drive to suppress from one 
		// side of the land to another.
		timer = sim.getValue("timer");
		this_gen = (sim.generation - 10);
		
		if (timer!="stopped") {
			all_x = all.x;
			at_start = (all_x >= 0.25) & (all_x <= 0.3);
			inds_start = all[at_start];
			
			if (size(inds_start) <= EQUILIBRIUM_BIN_POPULATION) {
				if (timer=="start") {
					catn("starting timer at " + this_gen);
					sim.setValue("timer", this_gen);
				}
			}
			at_end = (all_x >= 0.75) & (all_x <= 0.8);
			inds_end = all[at_end];
			
			if (size(inds_end) <= EQUILIBRIUM_BIN_POPULATION) {
				if (timer!= "start") {
					start_gen = sim.getValue("timer");
					gens_elapsed = this_gen - start_gen;
					catn("stopping timer at " + this_gen);
					catn("TIMED_GENS:: " + gens_elapsed);
					sim.setValue("timer", "stopped");
				}
			}
		}
		
		inds = all[all.countOfMutationsOfType(m2) == 0]; // Non-drive individuals
		x = inds.x;
		pos_vec = 0:(NUMBER_OF_CELLS - 1);
		dim = length(pos_vec);
		cell_width = 1.0/dim;
		positions = pos_vec * cell_width;
		gen_track = c();
		
		// Determine if there is an almost-empty strip of wt individuals with more than 50
		// wild-type individuals to the left. This means wts were able to get through
		// the "wall" of drive.
		for (i in 0:(dim-1)) {
			div_left = positions[i];
			in_division = (x >= div_left) & (x < (div_left + cell_width));
			inds_in_cell = inds[in_division];
			cell_count = size(inds_in_cell);
			if ((length(gen_track) > 0)) {
				if ((cell_count < 10) & sum(gen_track) > 50)
					catn("CHASE_GEN:: " + this_gen);
			}
			gen_track = c(gen_track, cell_count);
		}
	
		pop_size = sum(gen_track);
		
		// Prevent nan-errors
		if (pop_size > 1) {
			greens_coeff = (var(gen_track)/mean(gen_track) - 1)/(sum(gen_track) - 1);
			catn("WT_ALLELES:: " + num_wt + " " + this_gen + " " + pop_size +" " + "GC_SPACE::" + " " + greens_coeff); //check detection methods
		}
		
		// Record drive thickness and then average from 5 generations after the drop 
		// to the (chasing_gen - 5) if chasing occurred or the (suppression_gen - 5)
		// if chasing didn't occur.
		if (this_gen >= 5) {
			has_drive = all.countOfMutationsOfType(m2)==NUM_GRNAS;
			drive_inds = all[has_drive].x;
			if (size(drive_inds) > 0) {
				thickness = max(drive_inds) - min(drive_inds);
				catn("THICKNESS:: " + thickness);
			}
		}
	}
	
	if (NO_DROP)
		return;
	
	//// Conditions that will stop the simulation:
	
	// 1- The drive was lost and the wt population remained
	if (num_dr == 0 & pop_size>0) {
		catn("POP_PERSISTS:: " + this_gen);
		
		sim.simulationFinished();
	}
	
	// 2- An equilibrium state occurred
	if (rate_dr== 1 & pop_size > 0) {
		start = sim.getValue("track_eq");
		if (isNULL(start)) {
			sim.setValue("track_eq", 1);
		} else if (start == 10) { //only allow state for 10 generations
			started_at = this_gen - 10;
			catn("EQUILIBRIUM:: " + started_at);
			
			sim.simulationFinished();
		} else {
			elapsed = start + 1;
			sim.setValue("track_eq", elapsed);
		}
	}
	
	// 3- Suppression occurs
	if (pop_size == 0){
		catn("SUPPRESSED:: " + this_gen);
		sim.simulationFinished();
	}
	
	// 4 - R1 resistance alleles will prevent suppression
	if (num_complete_r1 >= 10000) {
		catn("RESISTANCE:: " + this_gen);
		sim.simulationFinished();
	}
}

// If there was no drop, stop after 100 generations of tracking
100 late() {
	if (!NO_DROP)
		return;
	sim.simulationFinished();

}

//// If there was a drop, stop simulation after 1000 generations if not stopped already
1010 late() {
	
	all = p1.individuals;
	all_males = all[all.tagF==0.0];
	has_drive = sum(all.countOfMutationsOfType(m2) >= NUM_GRNAS);
	rate_has_drive = has_drive/size(all_males);
	catn("ENDING_AFTER_1000:: " + rate_has_drive);
	sim.simulationFinished();
}


